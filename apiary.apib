HOST: http://api.sanger.ac.uk/

--- Candidate test
---
Our [S2](http://github.com/sanger/lims-api) application supports, as near as possible, a RESTful JSON based API.  The API enables client applications to
only assume that they can access the root URL (`/`), with all other URLs being returned as an action within the JSON; a small concession is made for
clients that already know a UUID, in that they can access that directly, i.e. if the client knows the UUID of a tube is
`00000000-1111-2222-3333-444444444444`, then they are free to access the URL `/00000000-1111-2222-3333-444444444444` for the tube JSON directly.

This document describes a similar API and provides a [mock server](http://mattdenner.apiary.io) that you can connect to in order to complete the candidate
test.  However, note that the resources in this system can be considered to be unique in time: that is, changing the data for a resource may change the
UUID, or any of the action URLs, associated with it.  Hence, you are **strongly advised** to only use data returned from the responses in order to flow to
the next step of your code, and certainly **discouraged from hardcoding any URLs**, or making any assumptions about their structure.

Your task is to implement a user interface that will enable a lab technician to record a tube-to-tube transfer.  Here is the behaviour required:

The lab technician needs to be able to scan in the barcode of a tube and have it be displayed on the screen.  Tubes that are empty should appear visually
different to those that have content in them.

The technician can then start a transfer between this source tube and a second target tube.  Starting the transfer should register a new tube in the
system, displaying it on the screen so that the technician can print out the barcode, but does not affect the contents of either tube.  It is only when
the technician finishes transferring the content from the source to the target tube, that they need to be able to record how much they transferred.

The mock server is configured to assume the following:

1. The source tube barcode is `SRC123456`;
2. The target tube barcode is `TRG123456`;
3. The volume transferred from source to target tube is `100%`.

The interface should be implemented as a single HTML5 file, supported by Javascript: there is no CGI or server support for logic available.  You can use any
Javascript framework you feel comfortable with, but you must not hardcode or assume the format of any URLs other than the root URL (`/`).
---

--
Root
The root URL (`/`) of the system always returns the initial set of behaviour.  Each of the entries in the root JSON can be considered a type of
resource that is available, i.e. in the example there are "search" and "tube" resources.  There may be more than this, or less, and it must be assumed
that the absence of a model means that this is not supported, i.e. if there is no "tube" resource type, then there are no tubes in the system.

Each of the `actions` entries within a resource type gives the actions that the resource type itself responds to.  For instance, in the example the
"search" resource type responds to `all` and `first`, which have semantics documented somewhere.  There are a set of standardised actions that may, or
may not be present:

* `read` which is the URL to read all instances of the resource type, in a paged fashion, via HTTP GET;
* `create` which is the URL used to create an instance of the resource type, via HTTP POST;
* `update` which is the URL used to update all instances of the resource type, via HTTP PUT or PATCH;
* `delete` which is the URL used to delete all instances of the resource type, via HTTP DELETE.

This association between these standard action names and their HTTP request method is maintained, even when viewing an individual resource, that will
have its own set of actions.
--
GET /
> Accept: application/json
< 200
< Content-Type: application/json
< Access-Control-Allow-Origin: *
< Access-Control-Allow-Methods: OPTIONS, GET
{
  "search": {
    "actions": {
      "all": "/search/all",
      "first": "/search/first"
    }
  },
  "tube": {
    "actions": {
      "create": "/tubes"
    }
  }
}

--
Tubes
An individual tube has a representation that can be read and contains:

* `barcode` which is a unique barcode for the tube;
* `state` which is an enumeration of 'pending', 'started' or 'done';
* a number of aliquots that contain the name of a `sample` and the `amount` of that sample.

All actions that can be performed on a tube are given in the `actions` block, including:

* `read` which the URL to use to read the JSON representation of the tube;
* `transfer` which is a URL for transferring from one tube to another;
* `change_state` which is a URL for changing the state of a tube.

Note that the URLs for the actions are unstable, and may change, and certain actions may not be always available.
--
GET /00000000-1111-0000-0000-000000000001
> Accept: application/json
< 200
< Content-Type: application/json
< Access-Control-Allow-Origin: *
< Access-Control-Allow-Credentials: true
{
  "tube": {
    "actions": {
      "read": "/00000000-1111-0000-0000-0000000000001",
      "transfer": "/00000000-1111-0000-0000-0000000000001/transfer",
      "change_state": "/00000000-1111-0000-0000-0000000000001/change_state"
    },
    "uuid": "00000000-1111-0000-0000-000000000001",
    "barcode": "SRC123456",
    "state": "done",
    "aliquots": [
      { "sample": "sample 1", "amount": 100 }
    ]
  }
}

--
Searching
Searches are considered a resource that can be created, and hence respond to an HTTP POST request, and can either find one or more of these.
Regardless of whether a search is for a singular result, or many, the search always expects a `barcode` value to be sent in the body of
the request.

Searching for an individual resource by barcode will always, if it finds a match, redirect to the appropriate location.

It is very important to note that this search is not centered around tubes: in the real world system there are other types of resources
that can be searched for by barcode, like plates, hence the returned resource could be anything.  However, note that to actually perform
this search a physical item must have been scanned, which means that the user interface is likely to say "Scan tube" and therefore the
application will know that the result is a tube, not a plate.
--
POST /search/first
> Accept: application/json
> Content-Type: application/json
{
  "search": {
    "barcode": "SRC123456"
  }
}
< 301
< Location: /00000000-1111-0000-0000-000000000001
< Access-Control-Allow-Origin: *
< Access-Control-Allow-Credentials: true


--
Singular searching with no result
If a singular search does not find a match then a not found error is returned, and the body of the response contains details of any
error messages from the system.

**NOTE:** The mock server does not respond to this error, ever!
--
POST /search/first
> Accept: application/json
> Content-Type: application/json
{
  "search": {
    "barcode": "SRC654321"
  }
}
< 404
< Content-Type: application/json
< Access-Control-Allow-Origin: *

{
  "error": {
    "message": "Barcode SRC654321 does not appear to exist"
  }
}


--
Searching for multiple barcoded items
When searching for all items with a matching barcode, the body of the response is a "page" of results, meaning that it has an `actions`
element that describes the paging.  The actions that might be present are:

* `read` which is the URL to read this page of results;
* `first` and `last` are URLs for the first and last page of results, which may be the same for only one page;
* `next` and `previous` are URLs for the next and previous page, should the current page be one of may.

All of these actions respond to the HTTP GET request.

In all cases, the `results` element is an array of matching entries, obeying the same JSON structure as the type of matching item.  If
there are no matches then, like the singular search, the response will be a not found error.  Note that the `total` element in the JSON
is the total number of results, across all pages, not on the page being returned..

Note that, as with a singular search, the results may be of differing types.
--
POST /search/all
> Accept: application/json
> Content-Type: application/json
{
  "search": {
    "barcode": "SRC123456"
  }
}
< 201
< Content-Type: application/json
< Access-Control-Allow-Origin: *
{
  "actions": {
    "read": "/11111111-0000-0000-0000-000000000000",
    "first": "/11111111-0000-0000-0000-000000000000",
    "last": "/11111111-0000-0000-0000-000000000000"
  },
  "total": 1,
  "results": [
    {
      "tube": {
        "actions": {
          "read": "/00000000-1111-0000-0000-0000000000001",
          "transfer": "/00000000-1111-0000-0000-0000000000001/transfer",
          "change_state": "/00000000-1111-0000-0000-0000000000001/change_state"
        },
        "uuid": "00000000-1111-0000-0000-000000000001",
        "barcode": "SRC123456",
        "state": "done",
        "aliquots": [
          { "sample": "sample 1", "amount": 100 }
        ]
      }
    }
  ]
}

--
Creating a tube
To register an empty tube in the system, and have it automatically assigned a barcode, only requires the use
of the `create` action for the tube resource type.
--
POST /tubes
> Accept: application/json
< 201
< Content-Type: application/json
< Access-Control-Allow-Origin: *
< Location: /00000000-1111-0000-0000-000000000002
{
  "tube": {
    "actions": {
      "read": "/00000000-1111-0000-0000-0000000000002",
      "transfer": "/00000000-1111-0000-0000-0000000000002/transfer",
      "change_state": "/00000000-1111-0000-0000-0000000000002/change_state"
    },
    "uuid": "00000000-1111-0000-0000-000000000002",
    "barcode": "TRG123456",
    "state": "pending",
    "aliquots": [ ]
  }
}

--
Changing the state of a tube
To change the state of a tube involves using the `change_state` action on the tube, giving the target state
that is required.
--
POST /00000000-1111-0000-0000-000000000002/change_state
> Accept: application/json
> Content-type: application/json
{
  "change_state": {
    "target": "started"
  }
}
< 200
< Content-Type: application/json
< Access-Control-Allow-Origin: *
{
  "tube": {
    "actions": {
      "read": "/00000000-1111-0000-0000-0000000000004",
      "transfer": "/00000000-1111-0000-0000-0000000000004/transfer",
      "change_state": "/00000000-1111-0000-0000-0000000000004/change_state"
    },
    "uuid": "00000000-1111-0000-0000-000000000004",
    "barcode": "TRG123456",
    "state": "started",
    "aliquots": [ ]
  }
}

--
Transferring between tubes
Transfers from a source tube to a target tube involve using the `transfer` action of the source tube, passing
the UUID of the target tube and the amount of material to be transferred.  The response body contains the transfer
that was made.

The amount is considered to be applied across all aliquots, i.e. if there are 2 aliquots, each with an amount of
100, and the transfer is for 75, then both aliquots will be reduced to 25.  If all of the content is transferred
then the source tube will have no aliquots, not an aliquot with a zero amount.
--
POST /00000000-1111-0000-0000-000000000001/transfer
> Accept: application/json
> Content-type: application/json
{
  "transfer": {
    "target": "00000000-1111-0000-0000-000000000004",
    "amount": 100
  }
}
< 201
< Content-Type: application/json
< Access-Control-Allow-Origin: *
{
  "transfer": {
    "source": {
      "actions": {
        "read": "/00000000-1111-0000-0000-0000000000003",
        "transfer": "/00000000-1111-0000-0000-0000000000003/transfer",
        "change_state": "/00000000-1111-0000-0000-0000000000003/change_state"
      },
      "uuid": "00000000-1111-0000-0000-000000000003",
      "barcode": "SRC123456",
      "state": "done",
      "aliquots": [ ]
    },
    "target": {
      "actions": {
        "read": "/00000000-1111-0000-0000-0000000000005",
        "transfer": "/00000000-1111-0000-0000-0000000000005/transfer",
        "change_state": "/00000000-1111-0000-0000-0000000000005/change_state"
      },
      "uuid": "00000000-1111-0000-0000-000000000005",
      "barcode": "TRG123456",
      "state": "started",
      "aliquots": [
        { "sample": "sample 1", "amount": 100 }
      ]
    },
    "amount": 100
  }
}

--
Extra stuff
You should not care about anything in this section, as it is here purely to enable the mock server to respond appropriately.
--
GET /00000000-1111-0000-0000-000000000002
> Accept: application/json
< 200
< Content-Type: application/json
< Access-Control-Allow-Origin: *
{
  "tube": {
    "actions": {
      "read": "/00000000-1111-0000-0000-0000000000002",
      "transfer": "/00000000-1111-0000-0000-0000000000002/transfer",
      "change_state": "/00000000-1111-0000-0000-0000000000002/change_state"
    },
    "uuid": "00000000-1111-0000-0000-000000000002",
    "barcode": "TRG123456",
    "state": "pending",
    "aliquots": [ ]
  }
}

--
--
GET /00000000-1111-0000-0000-000000000003
> Accept: application/json
< 200
< Content-Type: application/json
< Access-Control-Allow-Origin: *
{
  "tube": {
    "actions": {
      "read": "/00000000-1111-0000-0000-0000000000003",
      "transfer": "/00000000-1111-0000-0000-0000000000003/transfer",
      "change_state": "/00000000-1111-0000-0000-0000000000003/change_state"
    },
    "uuid": "00000000-1111-0000-0000-000000000003",
    "barcode": "SRC123456",
    "state": "done",
    "aliquots": [ ]
  }
}

--
--
GET /00000000-1111-0000-0000-000000000004
> Accept: application/json
< 200
< Content-Type: application/json
< Access-Control-Allow-Origin: *
{
  "tube": {
    "actions": {
      "read": "/00000000-1111-0000-0000-0000000000004",
      "transfer": "/00000000-1111-0000-0000-0000000000004/transfer",
      "change_state": "/00000000-1111-0000-0000-0000000000004/change_state"
    },
    "uuid": "00000000-1111-0000-0000-000000000004",
    "barcode": "TRG123456",
    "state": "started",
    "aliquots": [ ]
  }
}

--
--
GET /00000000-1111-0000-0000-000000000005
> Accept: application/json
< 200
< Content-Type: application/json
< Access-Control-Allow-Origin: *
{
  "tube": {
    "actions": {
      "read": "/00000000-1111-0000-0000-0000000000005",
      "transfer": "/00000000-1111-0000-0000-0000000000005/transfer",
      "change_state": "/00000000-1111-0000-0000-0000000000005/change_state"
    },
    "uuid": "00000000-1111-0000-0000-000000000005",
    "barcode": "TRG123456",
    "state": "started",
    "aliquots": [
      { "sample": "sample 1", "amount": 100 }
    ]
  }
}

--
--
GET /00000000-1111-0000-0000-000000000006
> Accept: application/json
< 200
< Content-Type: application/json
< Access-Control-Allow-Origin: *
{
  "tube": {
    "actions": {
      "read": "/00000000-1111-0000-0000-0000000000006",
      "transfer": "/00000000-1111-0000-0000-0000000000006/transfer",
      "change_state": "/00000000-1111-0000-0000-0000000000006/change_state"
    },
    "uuid": "00000000-1111-0000-0000-000000000006",
    "barcode": "TRG123456",
    "state": "done",
    "aliquots": [
      { "sample": "sample 1", "amount": 100 }
    ]
  }
}

--
--
POST /00000000-1111-0000-0000-000000000005/change_state
> Accept: application/json
> Content-type: application/json
{
  "change_state": {
    "target": "done"
  }
}
< 200
< Content-Type: application/json
< Access-Control-Allow-Origin: *
{
  "tube": {
    "actions": {
      "read": "/00000000-1111-0000-0000-0000000000006",
      "transfer": "/00000000-1111-0000-0000-0000000000006/transfer",
      "change_state": "/00000000-1111-0000-0000-0000000000006/change_state"
    },
    "uuid": "00000000-1111-0000-0000-000000000006",
    "barcode": "TRG123456",
    "state": "done",
    "aliquots": [
      { "sample": "sample 1", "amount": 100 }
    ]
  }
}
